{% load static %}
{% load humanize %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat with {{ other_user.full_name }}</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
  <style>
    /* Base Styles */
    :root {
      --primary: #6c63ff;
      --primary-light: #8f88ff;
      --primary-dark: #5046e5;
      --secondary: #ff6584;
      --secondary-light: #ff85a2;
      --bg: #f8f9fa;
      --text: #333;
      --text-light: #777;
      --card-bg: #fff;
      --shadow: rgba(0, 0, 0, 0.1);
      --radius: 12px;
      --transition: all 0.3s ease;
      --sent-bg: #dcf8c6;
      --received-bg: #f1f0f0;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Inter', sans-serif;
    }

    body {
      background-color: var(--bg);
      color: var(--text);
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      overflow-x: hidden;
    }

    a {
      text-decoration: none;
      color: inherit;
    }
    
    button {
      cursor: pointer;
      border: none;
      outline: none;
      font-size: 14px;
      font-weight: 500;
      background: transparent;
    }

    /* Loading Overlay */
    .loading-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.9);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      transition: opacity 0.3s ease;
    }

    .spinner {
      width: 70px;
      text-align: center;
    }

    .spinner > div {
      width: 18px;
      height: 18px;
      background-color: var(--primary);
      border-radius: 100%;
      display: inline-block;
      animation: sk-bouncedelay 1.4s infinite ease-in-out both;
      margin: 0 3px;
    }

    .spinner .bounce1 {
      animation-delay: -0.32s;
    }

    .spinner .bounce2 {
      animation-delay: -0.16s;
    }

    @keyframes sk-bouncedelay {
      0%, 80%, 100% { 
        transform: scale(0);
      } 40% { 
        transform: scale(1.0);
      }
    }

    /* Chat Header */
    .chat-header {
      position: sticky;
      top: 0;
      z-index: 100;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 15px 20px;
      background: white;
      box-shadow: 0 2px 15px var(--shadow);
      border-bottom: 1px solid rgba(108, 99, 255, 0.1);
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .back-button {
      color: var(--primary);
      font-size: 22px;
      transition: var(--transition);
    }

    .back-button:hover {
      transform: translateX(-3px);
    }

    .user-info-container {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .chat-profile-pic {
      width: 45px;
      height: 45px;
      border-radius: 50%;
      object-fit: cover;
      border: 2px solid var(--primary-light);
      box-shadow: 0 2px 10px rgba(108, 99, 255, 0.2);
      transition: var(--transition);
    }

    .chat-profile-pic:hover {
      transform: scale(1.05);
      box-shadow: 0 0 15px var(--primary-light);
    }

    .user-info h3 {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 2px;
      color: var(--text);
    }

    .user-status {
      font-size: 12px;
      color: var(--text-light);
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .status-dot {
      width: 8px;
      height: 8px;
      background-color: #4CAF50;
      border-radius: 50%;
      display: inline-block;
    }

    .header-actions {
      display: flex;
      gap: 15px;
    }

    .header-actions button {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: var(--primary);
      transition: var(--transition);
      background-color: rgba(108, 99, 255, 0.1);
    }

    .header-actions button:hover {
      background-color: rgba(108, 99, 255, 0.2);
      transform: scale(1.05);
    }

    /* Chat Container */
    .chat-container {
      flex: 1;
      max-width: 1000px;
      margin: 0 auto;
      width: 100%;
      padding: 0 15px;
      display: flex;
      flex-direction: column;
    }

    /* Chat Messages */
    .chat-body {
      flex: 1;
      overflow-y: auto;
      padding: 20px 10px;
      margin-bottom: 120px; /* Increased to account for the input bar and nav */
      display: flex;
      flex-direction: column;
      min-height: calc(100vh - 200px);
    }

    .message {
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 75%;
      position: relative;
      animation: fadeIn 0.3s ease;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .sent {
      background-color: var(--sent-bg);
      margin-left: auto;
      border-bottom-right-radius: 5px;
      align-self: flex-end;
    }

    .received {
      background-color: var(--received-bg);
      margin-right: auto;
      border-bottom-left-radius: 5px;
      align-self: flex-start;
    }

    .message-content {
      word-break: break-word;
      font-size: 15px;
      line-height: 1.4;
    }

    .message-meta {
      font-size: 11px;
      color: var(--text-light);
      text-align: right;
      margin-top: 4px;
    }

    /* Message Form */
    .message-form-container {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      padding: 15px;
      background-color: white;
      box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
      z-index: 10;
    }

    .message-form {
      max-width: 1000px;
      margin: 0 auto;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .message-input-wrapper {
      flex: 1;
      position: relative;
      display: flex;
      align-items: center;
      background-color: var(--bg);
      border-radius: 24px;
      padding: 0 15px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
      transition: var(--transition);
      border: 1px solid rgba(108, 99, 255, 0.2);
    }

    .message-input-wrapper:focus-within {
      box-shadow: 0 0 0 2px rgba(108, 99, 255, 0.3);
    }

    #message-input {
      flex: 1;
      border: none;
      outline: none;
      padding: 12px 0;
      background: transparent;
      font-size: 15px;
    }

    .emoji-button {
      color: var(--text-light);
      font-size: 20px;
      padding: 8px;
      transition: var(--transition);
    }

    .emoji-button:hover {
      color: var(--primary);
      transform: scale(1.1);
    }

    .send-button {
      width: 45px;
      height: 45px;
      background: linear-gradient(45deg, var(--primary), var(--primary-light));
      color: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: var(--transition);
      box-shadow: 0 2px 10px rgba(108, 99, 255, 0.3);
    }

    .send-button:hover {
      transform: scale(1.05);
      box-shadow: 0 5px 15px rgba(108, 99, 255, 0.4);
    }

    .send-button i {
      font-size: 18px;
    }

    /* Attachment options */
    .attachment-options {
      display: flex;
      gap: 10px;
    }

    .attachment-button {
      color: var(--text-light);
      font-size: 18px;
      padding: 8px;
      transition: var(--transition);
    }

    .attachment-button:hover {
      color: var(--primary);
      transform: scale(1.1);
    }

    /* Bottom Navigation */
    nav {
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      display: flex;
      justify-content: space-around;
      padding: 12px 0;
      box-shadow: 0 -3px 15px var(--shadow);
      z-index: 100;
      transform: translateY(100%);
      opacity: 0;
    }

    nav a {
      display: flex;
      flex-direction: column;
      align-items: center;
      color: var(--text-light);
      padding: 8px 16px;
      position: relative;
      transition: var(--transition);
    }

    nav a i {
      transition: var(--transition);
      opacity: 0.7;
      font-size: 24px;
    }

    nav a:hover i {
      transform: translateY(-5px);
      opacity: 1;
    }

    nav a.active-link {
      color: var(--primary);
    }

    nav a.active-link i {
      opacity: 1;
      color: var(--primary);
    }

    nav a.active-link::after {
      content: '';
      position: absolute;
      bottom: -12px;
      left: 50%;
      transform: translateX(-50%);
      width: 40px;
      height: 4px;
      background: linear-gradient(90deg, var(--primary), var(--primary-light));
      border-radius: 4px;
    }

    /* Date Divider */
    .date-divider {
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 20px 0;
    }

    .date-divider span {
      background-color: rgba(108, 99, 255, 0.1);
      padding: 5px 12px;
      border-radius: 15px;
      font-size: 12px;
      color: var(--primary-dark);
      font-weight: 500;
    }

    /* Typing indicator */
    .typing-indicator {
      display: flex;
      align-items: center;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 100px;
      margin-right: auto;
      background-color: var(--received-bg);
      margin-bottom: 15px;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .typing-indicator.visible {
      opacity: 1;
    }

    .typing-dot {
      height: 8px;
      width: 8px;
      border-radius: 50%;
      background-color: var(--text-light);
      margin: 0 2px;
      display: inline-block;
      animation: typingAnimation 1.4s infinite ease-in-out;
    }

    .typing-dot:nth-child(1) {
      animation-delay: 0s;
    }

    .typing-dot:nth-child(2) {
      animation-delay: 0.2s;
    }

    .typing-dot:nth-child(3) {
      animation-delay: 0.4s;
    }

    @keyframes typingAnimation {
      0%, 60%, 100% {
        transform: translateY(0);
      }
      30% {
        transform: translateY(-5px);
      }
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .chat-header {
        padding: 10px 15px;
      }

      .message {
        max-width: 85%;
      }

      .chat-profile-pic {
        width: 40px;
        height: 40px;
      }

      .header-actions button {
        width: 35px;
        height: 35px;
      }
    }
  </style>
</head>
<body>
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="spinner">
      <div class="bounce1"></div>
      <div class="bounce2"></div>
      <div class="bounce3"></div>
    </div>
  </div>

  <!-- Chat Header -->
  <div class="chat-header">
    <div class="header-left">
      <a href="{% url 'chat:inbox' %}" class="back-button">
        <i class="fas fa-arrow-left"></i>
      </a>
      <a href="{% url 'feed:profile' user_id=other_user.id %}" class="user-info-container">
        <img src="{{ other_user.profile_picture.url }}" alt="{{ other_user.full_name }}" class="chat-profile-pic">
        <div class="user-info">
          <h3>{{ other_user.full_name }}</h3>
          
        </div>
      </a>
    </div>
    <div class="header-actions">
      <button type="button" aria-label="Voice call">
        <i class="fas fa-phone"></i>
      </button>
      <button type="button" aria-label="Video call">
        <i class="fas fa-video"></i>
      </button>
      <button type="button" aria-label="More options">
        <i class="fas fa-ellipsis-v"></i>
      </button>
    </div>
  </div>

  <!-- Chat Container -->
  <div class="chat-container">
    <!-- Chat Messages -->
    <div class="chat-body" id="chat-messages">
      <div class="date-divider">
        <span>Today</span>
      </div>
      
      {% for message in messages %}
        <div class="message {% if message.sender == request.user %}sent{% else %}received{% endif %}">
          <div class="message-content">
            {{ message.content }}
          </div>
          <div class="message-meta">
            {{ message.timestamp|time:"H:i" }}
          </div>
        </div>
      {% endfor %}
      
      <div class="typing-indicator" id="typing-indicator">
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
      </div>
    </div>
  </div>

  <!-- Message Form -->
  <div class="message-form-container">
    <form id="chat-form" class="message-form">
      {% csrf_token %}
      <div class="attachment-options">
        <button type="button" class="attachment-button" aria-label="Add attachment">
          <i class="fas fa-paperclip"></i>
        </button>
        <button type="button" class="attachment-button" aria-label="Add image">
          <i class="fas fa-image"></i>
        </button>
      </div>
      <div class="message-input-wrapper">
        <input type="text" id="message-input" class="message-input" placeholder="Type your message...">
        <button type="button" class="emoji-button" aria-label="Add emoji">
          <i class="far fa-smile"></i>
        </button>
      </div>
      <button type="submit" class="send-button" aria-label="Send message">
        <i class="fas fa-paper-plane"></i>
      </button>
    </form>
  </div>

  <!-- Bottom Navigation Bar -->
  <nav>
    <a href="{% url 'feed:home' %}">
      <i class="fas fa-home"></i>
    </a>
    <a href="{% url 'feed:explore' %}">
      <i class="fas fa-compass"></i>
    </a>
    <a href="{% url 'feed:create_post' %}">
      <i class="fas fa-plus-circle"></i>
    </a>
    <a href="{% url 'feed:friends_list' %}">
      <i class="fas fa-user-friends"></i>
    </a>
    <a href="{% url 'feed:confession' %}">
      <i class="fas fa-bell"></i>
    </a>
  </nav>
  <script>
    // WebSocket connection setup
const username = "{{ other_user.username }}";
const currentUser = "{{ request.user.username }}";
const chatSocket = new WebSocket(
  'ws://' + window.location.host + '/ws/chat/' + username + '/'
);

// Elements
const chatMessages = document.querySelector('#chat-messages');
const messageForm = document.querySelector('#chat-form');
const messageInput = document.querySelector('#message-input');
const typingIndicator = document.querySelector('#typing-indicator');
const loadingOverlay = document.getElementById('loading-overlay');
const sendButton = document.querySelector('.send-button');

// BRUTALLY EFFECTIVE scrollToBottom function - guaranteed to work
function forceScrollToBottom() {
  // This is a much more aggressive approach to ensure scrolling happens
  try {
    // Try multiple approaches to force scrolling
    chatMessages.scrollTop = 999999; // Large number to ensure bottom
    
    // Use modern scrollTo with maximum value
    chatMessages.scrollTo({
      top: 999999,
      behavior: 'auto' // Use 'auto' instead of 'smooth' for more reliable behavior
    });
    
    // Scroll the entire window as a last resort
    window.scrollTo(0, document.body.scrollHeight);
    
    // As an extra measure, directly calculate and set the scrollTop
    const lastMessage = chatMessages.lastElementChild;
    if (lastMessage) {
      const scrollDestination = lastMessage.offsetTop;
      chatMessages.scrollTop = scrollDestination;
    }
  } catch (err) {
    console.error("Scroll error:", err);
  }
}

// Function to continuously attempt scrolling for a period to ensure it happens
function persistentScroll(duration = 1000, interval = 100) {
  const endTime = Date.now() + duration;
  
  function attemptScroll() {
    forceScrollToBottom();
    
    if (Date.now() < endTime) {
      setTimeout(attemptScroll, interval);
    }
  }
  
  attemptScroll();
}

// Handle incoming messages with guaranteed scrolling
chatSocket.onmessage = function(e) {
  const data = JSON.parse(e.data);
  const message = data.message;
  const sender = data.sender;
  
  // Hide typing indicator when message is received
  typingIndicator.classList.remove('visible');
  
  // Determine if the message is from the current user
  const isSentByCurrentUser = (sender === currentUser);
  
  // Create message element
  const messageElement = document.createElement('div');
  messageElement.className = 'message ' + (isSentByCurrentUser ? 'sent' : 'received');
  
  // Create message content
  const contentElement = document.createElement('div');
  contentElement.className = 'message-content';
  contentElement.textContent = message;
  
  // Create message timestamp
  const metaElement = document.createElement('div');
  metaElement.className = 'message-meta';
  const now = new Date();
  metaElement.textContent = now.getHours().toString().padStart(2, '0') + ':' + 
                           now.getMinutes().toString().padStart(2, '0');
  
  // Add elements to message
  messageElement.appendChild(contentElement);
  messageElement.appendChild(metaElement);
  
  // Add message to chat
  chatMessages.appendChild(messageElement);
  
  // Aggressive persistent scrolling to ensure message visibility
  persistentScroll(500);
};

// Handle form submission with guaranteed scrolling
messageForm.addEventListener('submit', function(e) {
  e.preventDefault();
  const message = messageInput.value.trim();
  
  if (message) {
    // Send message via WebSocket
    chatSocket.send(JSON.stringify({
      'message': message,
      'sender': currentUser
    }));
    
    // Clear input
    messageInput.value = '';
    messageInput.focus();
    
    // Critical: persistent scrolling after sending message
    persistentScroll(800);
  }
});

// Direct click handler for send button
sendButton.addEventListener('click', function() {
  const message = messageInput.value.trim();
  
  if (message) {
    // Send message via WebSocket
    chatSocket.send(JSON.stringify({
      'message': message,
      'sender': currentUser
    }));
    
    // Clear input
    messageInput.value = '';
    messageInput.focus();
    
    // Critical: persistent scrolling after clicking send
    persistentScroll(800);
  }
});

// Aggressive page load scrolling
document.addEventListener('DOMContentLoaded', function() {
  // Initial aggressive scroll
  forceScrollToBottom();
  
  // Continue attempting to scroll throughout page load
  persistentScroll(2000);
  
  // Hide loading overlay after all content is loaded
  setTimeout(function() {
    // Final aggressive scroll before revealing content
    forceScrollToBottom();
    
    // Hide loading overlay
    loadingOverlay.style.opacity = '0';
    setTimeout(() => {
      loadingOverlay.style.display = 'none';
      // One last attempt to scroll after overlay is gone
      forceScrollToBottom();
    }, 300);
    
    // Focus on input field
    messageInput.focus();
  }, 800);
});

// Handle message input directly
messageInput.addEventListener('keydown', function(e) {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    
    const message = messageInput.value.trim();
    if (message) {
      // Send message
      chatSocket.send(JSON.stringify({
        'message': message,
        'sender': currentUser
      }));
      
      // Clear input
      messageInput.value = '';
      
      // Critical: persistent scrolling after sending with enter key
      persistentScroll(800);
    }
  }
});

// Re-apply scroll to bottom when window is resized
window.addEventListener('resize', forceScrollToBottom);

// Ensure scrolling on any interactions
document.addEventListener('click', function() {
  setTimeout(forceScrollToBottom, 100);
});

// Handle attachment buttons
const attachmentButtons = document.querySelectorAll('.attachment-button');
attachmentButtons.forEach(button => {
  button.addEventListener('click', function() {
    alert('Attachment feature coming soon!');
  });
});

// Handle emoji button
const emojiButton = document.querySelector('.emoji-button');
emojiButton.addEventListener('click', function() {
  alert('Emoji picker coming soon!');
});
  </script>
</body>
</html>